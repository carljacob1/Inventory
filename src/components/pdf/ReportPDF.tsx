import React from 'react';
import { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';
import { formatIndianCurrency } from '@/utils/indianBusiness';

interface ReportData {
  title: string;
  subtitle?: string;
  generatedDate: Date;
  data: any[];
  columns: {
    key: string;
    label: string;
    width: string;
    align?: 'left' | 'center' | 'right';
    format?: 'currency' | 'number' | 'date' | 'text';
  }[];
  summary?: {
    label: string;
    value: number | string;
    format?: 'currency' | 'number' | 'text';
  }[];
}

interface ReportPDFProps {
  reportData: ReportData;
}

const styles = StyleSheet.create({
  page: {
    fontFamily: 'Helvetica',
    fontSize: 10,
    paddingTop: 35,
    paddingBottom: 65,
    paddingHorizontal: 35,
  },
  header: {
    marginBottom: 20,
    textAlign: 'center',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 12,
    marginBottom: 5,
    color: '#666666',
  },
  generatedDate: {
    fontSize: 9,
    color: '#888888',
  },
  table: {
    marginTop: 20,
    marginBottom: 20,
  },
  tableHeader: {
    flexDirection: 'row',
    borderBottomWidth: 2,
    borderBottomColor: '#000000',
    paddingBottom: 5,
    marginBottom: 5,
    fontWeight: 'bold',
    backgroundColor: '#f5f5f5',
    paddingHorizontal: 5,
  },
  tableRow: {
    flexDirection: 'row',
    paddingVertical: 3,
    borderBottomWidth: 1,
    borderBottomColor: '#eeeeee',
    paddingHorizontal: 5,
  },
  summarySection: {
    marginTop: 20,
    borderTopWidth: 2,
    borderTopColor: '#000000',
    paddingTop: 10,
  },
  summaryTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5,
    paddingHorizontal: 5,
  },
  footer: {
    position: 'absolute',
    fontSize: 8,
    bottom: 30,
    left: 35,
    right: 35,
    textAlign: 'center',
    color: 'grey',
  },
});

const formatValue = (value: any, format?: string): string => {
  if (value === null || value === undefined) return '-';
  
  switch (format) {
    case 'currency':
      return typeof value === 'number' ? formatIndianCurrency(value, false) : String(value);
    case 'number':
      return typeof value === 'number' ? value.toLocaleString('en-IN') : String(value);
    case 'date':
      return value instanceof Date ? value.toLocaleDateString('en-IN') : 
             typeof value === 'string' ? new Date(value).toLocaleDateString('en-IN') : String(value);
    default:
      return String(value);
  }
};

const getColumnStyle = (width: string, align: string = 'left') => ({
  width,
  textAlign: align as any,
  paddingHorizontal: 2,
});

export const ReportPDF: React.FC<ReportPDFProps> = ({ reportData }) => (
  <Document>
    <Page size="A4" style={styles.page}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>{reportData.title}</Text>
        {reportData.subtitle && (
          <Text style={styles.subtitle}>{reportData.subtitle}</Text>
        )}
        <Text style={styles.generatedDate}>
          Generated on: {reportData.generatedDate.toLocaleDateString('en-IN')} at {reportData.generatedDate.toLocaleTimeString('en-IN')}
        </Text>
      </View>

      {/* Data Table */}
      <View style={styles.table}>
        {/* Table Header */}
        <View style={styles.tableHeader}>
          {reportData.columns.map((column, index) => (
            <Text key={index} style={getColumnStyle(column.width, column.align)}>
              {column.label}
            </Text>
          ))}
        </View>
        
        {/* Table Rows */}
        {reportData.data.map((row, index) => (
          <View key={index} style={styles.tableRow}>
            {reportData.columns.map((column, colIndex) => (
              <Text key={colIndex} style={getColumnStyle(column.width, column.align)}>
                {formatValue(row[column.key], column.format)}
              </Text>
            ))}
          </View>
        ))}
      </View>

      {/* Summary Section */}
      {reportData.summary && reportData.summary.length > 0 && (
        <View style={styles.summarySection}>
          <Text style={styles.summaryTitle}>Summary</Text>
          {reportData.summary.map((item, index) => (
            <View key={index} style={styles.summaryRow}>
              <Text>{item.label}:</Text>
              <Text style={{ fontWeight: 'bold' }}>
                {formatValue(item.value, item.format)}
              </Text>
            </View>
          ))}
        </View>
      )}

      {/* Footer */}
      <Text style={styles.footer}>
        Report generated by Business Management System
      </Text>
    </Page>
  </Document>
);